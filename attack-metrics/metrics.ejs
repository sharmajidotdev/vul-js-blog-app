<!DOCTYPE html>
<html>
<head>
    <title>Attack Metrics</title>
    <link rel="stylesheet" href="/styles.css">
</head>
<body>
<div class="container">
    <h1>Attack Metrics</h1>
    <button id="attackBtn" class="btn">Run Attack</button>
    <span id="attackStatus" style="margin-left:1em;"></span>
    <div id="metrics-summary" style="margin-top:2em;">
      <table style="width:100%;border-collapse:separate;border-spacing:2em 0;">
        <tr>
          <th style="width:50%;text-align:center;font-size:1.2em;">SECURENESS</th>
          <th style="width:50%;text-align:center;font-size:1.2em;">VULNERABLE</th>
        </tr>
        <tr>
          <td style="vertical-align:top;background:#e8fbe8;padding:1em;border-radius:8px;">
            <strong>Attacks Blocked/Prevented:</strong> <span id="blockedAttacks"></span><br>
            <strong>Failed Attacks:</strong> <span id="failedAttacks"></span><br>
            <strong>Success Rate (Blocked):</strong> <span id="successRateBlocked"></span>%<br>
            <strong>Breakdown (Blocked):</strong>
            <ul id="breakdownBlocked"></ul>
            <details style="margin-top:1em;"><summary><b>Failed Payloads (Blocked)</b></summary>
              <ul id="failedPayloads"></ul>
            </details>
          </td>
          <td style="vertical-align:top;background:#fbe8e8;padding:1em;border-radius:8px;">
            <strong>Successful Attacks:</strong> <span id="vulnerabilities"></span><br>
            <strong>Total Attacks:</strong> <span id="totalAttacks"></span><br>
            <strong>Success Rate (Attacker):</strong> <span id="successRateAttacker"></span>%<br>
            <strong>Breakdown (Successful):</strong>
            <ul id="breakdown"></ul>
            <details style="margin-top:1em;"><summary><b>Success Payloads</b></summary>
              <ul id="successPayloads"></ul>
            </details>
          </td>
        </tr>
      </table>
      <!-- <h4>Summary</h4>
      <pre id="summaryJson" style="background:#f8f8f8; padding:1em; border-radius:5px; max-height:200px; overflow:auto;"></pre> -->
    </div>
    <h4>Raw JSON</h4>
    <pre id="rawJson" style="background:#f8f8f8; padding:1em; border-radius:5px; max-height:300px; overflow:auto;"></pre>
    <button id="downloadBtn" class="btn">Download JSON</button>
</div>
<script>
async function fetchMetrics() {

    // Always fetch data first
    const res = await fetch('/metrics/attack-metrics');
    const data = await res.json();

    // Show failed payloads (blocked)
    const failedPayloadsList = document.getElementById('failedPayloads');
    failedPayloadsList.innerHTML = '';
    if (data.details && Array.isArray(data.details.errors)) {
      for (const err of data.details.errors) {
        const li = document.createElement('li');
        li.textContent = `${err.type}: ${err.payload} | ${err.error || ''}`;
        if (err.responseSnippet) {
          const pre = document.createElement('pre');
          pre.textContent = err.responseSnippet;
          li.appendChild(pre);
        }
        failedPayloadsList.appendChild(li);
      }
    }

    // Show success payloads (vulnerable)
    const successPayloadsList = document.getElementById('successPayloads');
    successPayloadsList.innerHTML = '';
    if (data.details) {
      for (const [type, arr] of Object.entries(data.details)) {
        if (type === 'errors' || !Array.isArray(arr)) continue;
        for (const entry of arr) {
          const li = document.createElement('li');
          li.textContent = `${type}: ${entry.payload}`;
          if (entry.responseSnippet) {
            const pre = document.createElement('pre');
            pre.textContent = entry.responseSnippet;
            li.appendChild(pre);
          }
          successPayloadsList.appendChild(li);
        }
      }
    }
    // Only update elements that exist in the DOM
    const elBlocked = document.getElementById('blockedAttacks');
    const elFailed = document.getElementById('failedAttacks');
    if (elFailed) elFailed.textContent = data.failedAttacks;
    // Calculate and show separate success rates
    const blockedAttacks = data.totalAttacks - data.vulnerabilities;
    if (elBlocked) elBlocked.textContent = blockedAttacks;
    const successRateBlocked = data.totalAttacks > 0 ? ((blockedAttacks / data.totalAttacks) * 100).toFixed(2) : '0.00';
    const successRateAttacker = data.totalAttacks > 0 ? ((data.vulnerabilities / data.totalAttacks) * 100).toFixed(2) : '0.00';
    const elSuccessRateBlocked = document.getElementById('successRateBlocked');
    if (elSuccessRateBlocked) elSuccessRateBlocked.textContent = successRateBlocked;
    const elSuccessRateAttacker = document.getElementById('successRateAttacker');
    if (elSuccessRateAttacker) elSuccessRateAttacker.textContent = successRateAttacker;
    const elVulnerabilities = document.getElementById('vulnerabilities');
    if (elVulnerabilities) elVulnerabilities.textContent = data.vulnerabilities;
    const elTotalAttacks = document.getElementById('totalAttacks');
    if (elTotalAttacks) elTotalAttacks.textContent = data.totalAttacks;
    document.getElementById('vulnerabilities').textContent = data.vulnerabilities;
    document.getElementById('totalAttacks').textContent = data.totalAttacks;
    document.getElementById('failedAttacks').textContent = data.failedAttacks;
    // document.getElementById('successRate').textContent = data.successRate;
    // Only show these types in breakdowns
    const allowedTypes = ['searchXss', 'postXss', 'commentXss', 'loginSqli', 'searchSqli'];
    const breakdown = data.breakdown || {};
    const breakdownAttempts = data.breakdownAttempts || {};
    const breakdownBlocked = data.breakdownBlocked || {};
    const breakdownList = document.getElementById('breakdown');
    breakdownList.innerHTML = '';
    for (const k of allowedTypes) {
      if (breakdown[k] !== undefined) {
        const attempted = breakdownAttempts[k] || 0;
        const li = document.createElement('li');
        li.textContent = `${k}: ${breakdown[k]} / ${attempted} successful`;
        breakdownList.appendChild(li);
      }
    }
    // Breakdown (blocked)
    document.getElementById('blockedAttacks').textContent = blockedAttacks;
    const breakdownBlockedList = document.getElementById('breakdownBlocked');
    breakdownBlockedList.innerHTML = '';
    for (const k of allowedTypes) {
      if (breakdownBlocked[k] !== undefined) {
        const attempted = breakdownAttempts[k] || 0;
        const li = document.createElement('li');
        li.textContent = `${k}: ${breakdownBlocked[k]} / ${attempted} blocked`;
        breakdownBlockedList.appendChild(li);
      }
    }
    // Summary
    // document.getElementById('summaryJson').textContent = JSON.stringify(data.summary, null, 2);
    // Raw JSON
    document.getElementById('rawJson').textContent = JSON.stringify(data, null, 2);
    document.getElementById('downloadBtn').onclick = function() {
        const blob = new Blob([JSON.stringify(data, null, 2)], {type: 'application/json'});
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'attack-metrics.json';
        a.click();
        URL.revokeObjectURL(url);
    };
}

document.getElementById('attackBtn').onclick = async function() {
    document.getElementById('attackStatus').textContent = 'Running attack...';
    const res = await fetch('/attack', { method: 'POST' });
    if (res.ok) {
        document.getElementById('attackStatus').textContent = 'Attack complete!';
        await fetchMetrics();
    } else {
        document.getElementById('attackStatus').textContent = 'Attack failed!';
    }
};

fetchMetrics();
</script>
</body>
</html>
